import uuid
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from storage import update_user, get_user, upsert_list, get_list
from utils import get_time_info, get_random_quote, parse_hhmm, next_datetime_from_hhmm
from keyboards import tasks_keyboard
from scheduler import schedule_tasks_reminder, schedule_wakeup


router = Router()


def get_user_state(user_id):
    return get_user(user_id).get("state")


# 1Ô∏è‚É£ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ñ–æ–∫—É—Å
@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    text = f"{get_time_info()}\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –ó–µ–º–ª—è!\n\n–¶–∏—Ç–∞—Ç–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:\n<i>{get_random_quote()}</i>\n\n‚òï –í—ã–ø–µ–π —á–∞—à–µ—á–∫—É –∫–æ—Ñ–µ –∏–ª–∏ —á–∞—é.\n–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è: –∫–∞–∫–∞—è —É —Ç–µ–±—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–µ–ª—å?\n–í —á–µ–º —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?\n\n‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É ‚Äî —Ç–≤–æ–π <b>–§–æ–∫—É—Å –¥–Ω—è</b>."
    update_user(user_id, {"state": "await_focus"})
    await message.answer(text)


@router.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    state = get_user_state(user_id)
    text = message.text.strip()

    if state == "await_focus":
        update_user(user_id, {"focus": text, "state": "await_tasks"})
        await message.answer(
            f"–§–æ–∫—É—Å –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{text}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
        )
        return

    if state == "await_tasks":
        tasks = [t.strip() for t in text.split(",") if t.strip()]
        if not tasks:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç. –í–≤–µ–¥–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ.")
            return
        list_id = str(uuid.uuid4())
        upsert_list(user_id, list_id, tasks)
        update_user(user_id, {"current_list": list_id, "state": "await_time"})
        await message.answer(
            "‚úÖ –°–ø–∏—Å–æ–∫ –¥–µ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?\n–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)"
        )
        return

    if state == "await_time":
        if not parse_hhmm(text):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
            return
        u = get_user(user_id)
        list_id = u.get("current_list")
        focus = u.get("focus")
        schedule_tasks_reminder(message.bot, user_id, list_id, focus, text)
        update_user(user_id, {"state": None})
        await message.answer(
            f"‚è≥ –û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –¥–µ–ª–∞—Ö –≤ <b>{text}</b>.\n–¢—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–∑–∂–µ."
        )
        return

    if state and state.startswith("await_add:"):
        list_id = state.split(":")[1]
        new_tasks = [t.strip() for t in text.split(",") if t.strip()]
        lst = get_list(user_id, list_id)
        if lst:
            all_tasks = lst.get("tasks", []) + new_tasks
            upsert_list(user_id, list_id, all_tasks)
            update_user(user_id, {"state": "await_time"})
            await message.answer(
                "‚úÖ –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –Ω–∏–º? (–ß–ß:–ú–ú)"
            )
        return

    if state == "await_wakeup":
        if not parse_hhmm(text):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
            return

        def build_hello():
            return f"{get_time_info()}\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –ó–µ–º–ª—è!\n\n–¶–∏—Ç–∞—Ç–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:\n<i>{get_random_quote()}</i>\n\n‚òï –í—ã–ø–µ–π —á–∞—à–µ—á–∫—É –∫–æ—Ñ–µ –∏–ª–∏ —á–∞—é.\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π <b>–§–æ–∫—É—Å –¥–Ω—è</b>."

        schedule_wakeup(message.bot, user_id, text, build_hello)
        update_user(user_id, {"state": None})
        await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–≤—Ç—Ä–∞ —è —Ä–∞–∑–±—É–∂—É —Ç–µ–±—è –≤ <b>{text}</b> üåÖ")
        return


# 3Ô∏è‚É£ –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
@router.callback_query(F.data.startswith("done:"))
async def mark_task_done(callback: CallbackQuery):
    _, list_id, idx = callback.data.split(":")
    idx = int(idx)
    user_id = callback.from_user.id
    lst = get_list(user_id, list_id)
    if not lst:
        await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    tasks = lst.get("tasks", [])
    if 0 <= idx < len(tasks):
        task = tasks[idx]
        tasks[idx] = task[2:] if task.startswith("‚òë") else "‚òë " + task
    upsert_list(user_id, list_id, tasks)
    await callback.message.edit_reply_markup(
        reply_markup=tasks_keyboard(list_id, tasks)
    )
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")


@router.callback_query(F.data.startswith("add:"))
async def add_task_prompt(callback: CallbackQuery):
    _, list_id = callback.data.split(":")
    update_user(callback.from_user.id, {"state": f"await_add:{list_id}"})
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await callback.answer()


@router.callback_query(F.data.startswith("finish:"))
async def finish_day(callback: CallbackQuery):
    update_user(callback.from_user.id, {"state": "await_wakeup"})
    await callback.message.answer(
        "üåô –î–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±—è —Ä–∞–∑–±—É–¥–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?\n–§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00)"
    )
    await callback.answer()
